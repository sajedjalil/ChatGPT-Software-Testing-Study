Question:
When overriding the equals() method, programmers are also required to override the hashCode() method;
otherwise clients cannot store instances of these objects in common Collection structures such as HashSet.
For example, the Point class from Chapter 1 is defective in this regard. Demonstrate the problem with Point using a HashSet.

Here is an example of the problem with the Point class using a HashSet:

-----------------------------------------------------------------------
ChatGPT:
import java.util.HashSet;

public class Main {
    public static void main(String[] args) {
        HashSet<Point> set = new HashSet<Point>();
        Point p1 = new Point(1, 2);
        Point p2 = new Point(1, 2);
        set.add(p1);
        set.add(p2);
        System.out.println(set.size()); // prints ""2"" instead of ""1""
    }
}

class Point {
    int x, y;

    public Point(int x, int y) {
        this.x = x;
        this.y = y;
    }

    // equals() method is not overridden
}
In this example, we have a Point class that does not override the equals() method. We create two Point objects, p1 and p2, that have the same x and y values. We then add these two objects to a HashSet. Since the equals() method is not overridden, the HashSet considers these two objects to be different and adds them both to the set. As a result, the size of the set is 2 instead of 1.

This problem can be resolved by overriding the equals() and hashCode() method in the Point class so that two Point objects with the same x and y values are considered equal and have the same hash code."



